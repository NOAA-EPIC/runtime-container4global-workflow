################################################################################
# Stage 1: Builder
# - Uses a local image with the full development environment (compilers, git).
# - Clones and builds the global-workflow application.
################################################################################
Bootstrap: localimage
From: ./ubuntu22.04-intel-ufs-env-v1.9.2.img
Stage: builder

%post
    # Fail on error and print commands for easier debugging
    set -e
    set -x

    # Create and move into the working directory
    mkdir -p /opt
    cd /opt

    # Create common mount points needed for HPC environments
    mkdir -p /contrib /lustre /scratch /scratch3 /scratch4 /mnt /Users


################################################################################
# Stage 2: Final
# - Starts from a minimal Intel oneAPI runtime image.
# - Copies only the necessary compiled application and dependencies from the
#   builder stage, creating a much smaller and cleaner final container.
################################################################################
Bootstrap: docker
From: intel/oneapi-runtime:2024.2.0-1-devel-ubuntu22.04
Stage: final

%files from builder
    # Copy the compiled application and its Spack-Stack dependencies
    #/opt/global-workflow-cloud /opt/global-workflow-cloud
    /usr/lmod /usr/lmod
    /usr/local/aws-cli /usr/local/aws-cli
    /opt/spack-stack /opt/spack-stack
    /usr/bin/lua /usr/bin/lua
    /usr/lib/lua /usr/lib/lua
    /usr/share/lua /usr/share/lua
    /usr/lmod/lmod/libexec/lmo /usr/lmod/lmod/libexec/lmo
    /usr/lmod/lmod/libexec/addto /usr/lmod/lmod/libexec/addto
    /usr/lib/x86_64-linux-gnu/libmpi.so.40 /usr/lib/x86_64-linux-gnu/libmpi.so.40
    /usr/lib/x86_64-linux-gnu/libopen-rte.so.40 /usr/lib/x86_64-linux-gnu/libopen-rte.so.40
    /usr/lib/x86_64-linux-gnu/libopen-pal.so.40 /usr/lib/x86_64-linux-gnu/libopen-pal.so.40
    /usr/lib/x86_64-linux-gnu/libevent_core-2.1.so.7 /usr/lib/x86_64-linux-gnu/libevent_core-2.1.so.7
    /usr/lib/x86_64-linux-gnu/libevent_pthreads-2.1.so.7 /usr/lib/x86_64-linux-gnu/libevent_pthreads-2.1.so.7
    /etc/localtime /etc/localtime
    #/root /root # Be cautious with this; copy only what's necessary.
    #/var /var

    # CRITICAL: Avoid copying the entire /usr directory.
    # Instead, identify the specific libraries your application needs from the
    # builder and copy them explicitly. This keeps the final image small.
    # Example (you will need to find the actual paths):
    # /usr/lib/x86_64-linux-gnu/libsome-dependency.so.1 /usr/lib/x86_64-linux-gnu/

%post
    # This section is for tasks to run inside the final container, like setup.
    set -e
    set -x

    # Ensure vim is installed and configure alternatives
    apt-get update && apt-get install -y vim
    ln -sf /usr/bin/vim.basic /etc/alternatives/vi
    ln -sf /usr/bin/vim.basic /etc/alternatives/vim
    apt-get clean
    rm -rf /var/lib/apt/lists/*

%environment
    # Set the runtime environment for the final container.
    # This is the proper place to source scripts and set variables.
    export SHELL=/bin/bash
    source /usr/lmod/lmod/init/bash
    module purge

%runscript
    # This is the default command executed when you run the container.
    echo "Welcome to the Global Workflow container."
    echo "Starting interactive bash shell..."
    exec /bin/bash "$@"

